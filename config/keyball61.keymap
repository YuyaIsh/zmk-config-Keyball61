#define DEFAULT 0
#define SYM     1
#define FUN     2
#define MOUSE   3
#define SCROLL  4
#define SNIPE   5

#include <behaviors/mouse_keys.dtsi>
#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/mouse.h>

&lt {
    tapping-term-ms = <240>;
    flavor = "balanced";
    quick-tap-ms = <150>;
};

&mt {
    tapping-term-ms = <200>;
    flavor = "tap-preferred";
    quick-tap-ms = <150>;
};

/ {
    combos { compatible = "zmk,combos"; };

    macros {
        virtual_window_right: virtual_window_right {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&sk LC(LEFT_WIN) &kp RIGHT_ARROW>;
            label = "VIRTUAL_WINDOW_RIGHT";
        };

        virtual_window_left: virtual_window_left {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&sk LC(LEFT_WIN) &kp LEFT>;
            label = "VIRTUAL_WINDOW_LEFT";
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            label = "QWRT";
            bindings = <
&kp ESC    &kp N1        &kp N2        &kp N3                &kp N4      &kp N5                                    &kp N6       &kp N7  &kp N8     &kp N9   &kp N0    &kp DEL
&kp TAB    &kp Q         &kp W         &kp E                 &kp R       &kp T                                     &kp Y        &kp U   &kp I      &kp O    &kp P     &kp AT_SIGN
&kp RET    &kp A         &kp S         &kp D                 &kp F       &kp G                                     &kp H        &kp J   &kp K      &kp L    &kp SEMI  &kp COLON
&kp LSHFT  &kp Z         &kp X         &kp C                 &kp V       &kp B        &kp LEFT_ALT  &kp RIGHT_ALT  &lt 2 N      &kp M   &kp COMMA  &kp DOT  &kp FSLH  &kp BACKSLASH
&kp LCTRL  &kp LEFT_WIN  &kp LEFT_ALT  &virtual_window_left  &lt 2 HOME  &lt 1 SPACE  &lt 4 END     &kp BACKSPACE  &lt 3 ENTER                              &kp DEL   &kp RET
            >;
        };

        mouse_arrow_layer {
            label = "MOUSE_ARROW";
            bindings = <
&tog 5         &none      &none            &none      &none        &none                      &none          &none         &none      &none           &none     &trans
&trans         &none      &kp LC(LS(TAB))  &kp UP     &kp LC(TAB)  &kp LC(T)                  &kp LA(RIGHT)  &msc SCRL_UP  &mkp MCLK  &msc SCRL_DOWN  &kp HOME  &none
&kp LC(ENTER)  &kp LC(A)  &kp LEFT         &kp DOWN   &kp RIGHT    &none                      &kp LA(LEFT)   &mkp LCLK     &mkp RCLK  &kp LCTRL       &kp END   &none
&trans         &kp LC(Z)  &kp LC(X)        &kp LC(C)  &kp LC(V)    &kp LC(Y)  &trans  &trans  &none          &none         &none      &none           &none     &none
&trans         &trans     &trans           &trans     &trans       &none      &trans  &trans  &trans                                                  &trans    &trans
            >;
        };

        number_function_layer {
            bindings = <
&trans  &trans  &trans   &trans                &trans   &trans                  &trans  &kp N7        &kp N8  &kp N9  &trans  &trans
&trans  &kp F1  &kp F2   &kp F3                &kp F4   &trans                  &trans  &kp N4        &kp N5  &kp N6  &trans  &trans
&trans  &kp F5  &kp F6   &kp F7                &kp F8   &trans                  &trans  &kp N1        &kp N2  &kp N3  &trans  &trans
&trans  &kp F9  &kp F10  &kp F11               &kp F12  &trans  &trans  &trans  &trans  &kp NUMBER_0  &trans  &trans  &trans  &trans
&trans  &trans  &trans   &virtual_window_left  &trans   &trans  &trans  &trans  &trans                                &trans  &trans
            >;

            label = "NUM_FUNC";
        };

        symbol_layer {
            label = "SYM";
            bindings = <
&trans  &trans           &trans             &trans    &trans      &trans                       &trans         &trans     &trans                &trans                 &trans        &trans
&trans  &kp EXCLAMATION  &kp DOUBLE_QUOTES  &kp HASH  &kp DOLLAR  &kp PERCENT                  &kp AMPERSAND  &kp SQT    &kp LEFT_PARENTHESIS  &kp RIGHT_PARENTHESIS  &kp PIPE      &kp GRAVE
&trans  &trans           &trans             &trans    &trans      &trans                       &kp MINUS      &kp EQUAL  &kp LEFT_BRACKET      &kp RIGHT_BRACKET      &kp PLUS      &kp ASTRK
&trans  &trans           &trans             &trans    &trans      &trans       &trans  &trans  &kp CARET      &kp TILDE  &kp LS(LBRC)          &kp LS(RBRC)           &kp QUESTION  &kp UNDER
&trans  &trans           &trans             &trans    &trans      &trans       &trans  &trans  &trans                                                                 &trans        &trans
            >;
        };

        bt_layer {
            label = "bt";
            bindings = <
&bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_SEL 3           &bt BT_SEL 4  &bt BT_CLR                  &trans  &trans  &trans  &trans  &trans  &trans
&trans        &trans        &trans        &trans                 &trans        &trans                      &trans  &trans  &trans  &trans  &trans  &trans
&trans        &trans        &trans        &trans                 &trans        &trans                      &trans  &trans  &trans  &trans  &trans  &trans
&trans        &trans        &trans        &trans                 &trans        &trans      &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans
&trans        &trans        &trans        &virtual_window_right  &trans        &trans      &trans  &trans  &trans                          &trans  &trans
            >;
        };

        minecraft {
            bindings = <
&trans  &trans  &trans  &trans  &trans     &trans                     &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans     &trans                     &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans     &trans                     &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans     &trans     &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &kp SPACE  &kp SPACE  &trans  &trans  &trans                          &trans  &trans
            >;
        };
    };
};
